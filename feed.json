{
    "version": "https://jsonfeed.org/version/1",
    "title": "享受&代码&时光~",
    "subtitle": "赶赴一场时光的约定，不曾失约；只是不知应该赴约而来的人，是否会依约而至。",
    "icon": "https://enjoycodetime.github.io/images/favicon.ico",
    "description": "欢迎来到我的个人博客。本博客专注分享IT、职场、生活、阅读写作、音乐、健身等专业知识，为您展示一位程序员小哥哥的千面人生。让我们用行动记录点滴，共同成长，共同进步！    谢谢~！",
    "home_page_url": "https://EnjoyCodeTime.github.io",
    "items": [
        {
            "id": "https://enjoycodetime.github.io/2021/12/04/hello-world/",
            "url": "https://enjoycodetime.github.io/2021/12/04/hello-world/",
            "title": "Hello World",
            "date_published": "2021-12-04T10:51:29.687Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"Quick-Start\">Quick Start</h2>\n<h3 id=\"Create-a-new-post\">Create a new post</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"Run-server\">Run server</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ hexo server\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"Generate-static-files\">Generate static files</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ hexo generate\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"Deploy-to-remote-sites\">Deploy to remote sites</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ hexo deploy\n</code></pre>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "https://enjoycodetime.github.io/2020/04/12/Procedural-life/week-1/",
            "url": "https://enjoycodetime.github.io/2020/04/12/Procedural-life/week-1/",
            "title": "第1周 计算",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<p>:::note info<br>\n以下为个人学习笔记和习题整理课程：零基础学Java语言-浙江大学-翁恺 @ 中国大学MOOC<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1pKVS0xMDAxNTQxMDAx\">https://www.icourse163.org/course/ZJU-1001541001</span><br>\n:::</p>\n<h1>课堂笔记</h1>\n<h2 id=\"读输入、字符串输出\">读输入、字符串输出</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输入Scan之后，按下键盘 Alt + “/” 键，Eclipse下自动补全。</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 让in这个对象做读入下一行的动作，结果交给System.out这个对象去打印一行。</span>\n\n<span class=\"token comment\">// 字符串的 + 用来连接两个字符串形成更长的字符串。</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>tips：</p>\n<ul>\n<li><code>System.out.println</code> 会换行，<code>System.out.print</code> 则不会换行</li>\n<li>出现警告：<code>Resource leak: 'in' is never closed</code>，可以在函数的最后加入</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//释放</span>\n</code></pre>\n<h2 id=\"变量\">变量</h2>\n<ul>\n<li>\n<p><strong>形式</strong>：&lt;类型名称&gt; &lt;变量名称&gt; = &lt;初始值&gt;<br>\n<code>int price, amount; // 同时定义两个变量</code><br>\n<code>int price = 0; // 定义变量并赋值</code><br>\n<code>int price, amount = 100, age;</code></p>\n</li>\n<li>\n<p><strong>类型名称</strong>：Java是一种<strong>强类型语言</strong>，所有变量在使用前必须定义或声明，所有变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，程序运行过程中也不能改变变量的类型。</p>\n</li>\n<li>\n<p><strong>变量名称</strong>：又称标识符，只能由字母、数字、下划线构成，数字不能出现在第一个位置。此外，Java的保留字也不能用作标识符。</p>\n</li>\n<li>\n<p>Java的保留字列表</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>abstract</th>\n<th>do</th>\n<th>implements</th>\n<th>protected</th>\n<th>throws</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>double</td>\n<td>import</td>\n<td>public</td>\n<td>transient</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>instanceof</td>\n<td>return</td>\n<td>true</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>extends</td>\n<td>int</td>\n<td>short</td>\n<td>try</td>\n</tr>\n<tr>\n<td>case</td>\n<td>false</td>\n<td>interface</td>\n<td>static</td>\n<td>while</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>final</td>\n<td>long</td>\n<td>strictfp</td>\n<td>void</td>\n</tr>\n<tr>\n<td>char</td>\n<td>finally</td>\n<td>native</td>\n<td>super</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>class</td>\n<td>float</td>\n<td>new</td>\n<td>switch</td>\n</tr>\n<tr>\n<td>const*</td>\n<td>for</td>\n<td>null</td>\n<td>synchronized</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>goto*</td>\n<td>package</td>\n<td>this</td>\n</tr>\n<tr>\n<td>default</td>\n<td>if</td>\n<td>private</td>\n<td>throw</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"task-list\">\n<li>以下哪些标识符是符合规则的？</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> currency</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> lastName</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\"><label for=\"cbx_2\"> fireplace</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\"><label for=\"cbx_3\"> _last_name</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> xingmin</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\"><label for=\"cbx_5\"> class</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\"><label for=\"cbx_6\"> goto</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\"><label for=\"cbx_7\"> 4ever</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\"><label for=\"cbx_8\"> time-machine</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" disabled=\"true\"><label for=\"cbx_9\"> Int</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\"><label for=\"cbx_10\"> $12</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\"><label for=\"cbx_11\"> 我是变量</label></li>\n</ul>\n<h2 id=\"常量-final\">常量 final</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> AMOUNT <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// final是一个修饰符，表示这个变量的值一旦初始化，就不能再修改了。</span>\n</code></pre>\n<h2 id=\"变量类型\">变量类型</h2>\n<h3 id=\"整数-int\">整数 int</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>如果用户输入的不是整数，则会报错 <code>java.util.InputMismatchException</code>。</li>\n<li>程序要求读入多个数字时，可以在一行输入，中间用空格分开，也可以多行输入。</li>\n<li>每次召唤<code>in.nextInt()</code>，它就等待用户输入一个整数。</li>\n<li>两个整数的运算结果只能是整数。</li>\n<li>在Java中，<code>10</code>和<code>10.0</code>是完全不同的数。</li>\n</ul>\n<h3 id=\"浮点数-double\">浮点数 double</h3>\n<ul>\n<li><strong>浮点数运算有误差</strong>：由于二进制的自身限制，浮点计算需要将十进制先转换为二进制，然后对二进制数进行计算，因此导致误差。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token operator\">-</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 结果为 0.09999999999999987</span>\n</code></pre>\n<ul>\n<li>整数类型不能表达有小数部分的数；整数运算速度快，占内存小；日常中整数运算多。</li>\n</ul>\n<h2 id=\"赋值运算\">赋值运算</h2>\n<h3 id=\"强制类型转换\">强制类型转换</h3>\n<ul>\n<li>浮点数和整数放在一起运算时，Java会将整数转换成浮点数，然后进行浮点数运算。</li>\n<li>强制性转换的优先级高于四则运算。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//会报错</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//不会报错</span>\n</code></pre>\n<h3 id=\"运算符优先级\">运算符优先级</h3>\n<ul>\n<li>单目运算符<code>+</code> <code>-</code> 优先级最高</li>\n<li>结合关系一般自左向右，单目<code>+</code> <code>-</code>和赋值<code>=</code>自右向左。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">result <span class=\"token operator\">=</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"复合赋值\">复合赋值</h3>\n<ul>\n<li>5个算术运算符，<code>+ - * / %</code>，可以和赋值运算符 <code>=</code> 结合起来，形成复合赋值运算。注意，两个运算符中间不要有空格。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">total <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\ntotal <span class=\"token operator\">*</span> <span class=\"token operator\">=</span> sum<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntotal <span class=\"token operator\">/=</span> <span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>递增递减运算符 <code>++</code> <code>--</code>，给变量+1或-1</li>\n<li>前缀后缀：</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span>\nt1 <span class=\"token operator\">=</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// t1先被赋值为 a 即14， a自加到 15</span>\nt2 <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// a先自加到 15，t2被赋值为 a 即 15</span>\n</code></pre>\n<h1>编程题</h1>\n<h2 id=\"题目1-温度转换（5分）\">题目1. 温度转换（5分）</h2>\n<ul>\n<li>\n<p><strong>题目内容</strong><br>\n写一个将华氏温度转换成摄氏温度的程序，转换的公式是：</p>\n<p><code>°F = (9/5)*°C + 32</code></p>\n<p>其中C表示摄氏温度，F表示华氏温度。</p>\n<p>程序的输入是一个整数，表示华氏温度。输出对应的摄氏温度，也是一个整数。</p>\n<p>提示，为了把计算结果的浮点数转换成整数，需要使用下面的表达式：</p>\n<p><code>(int)x;</code></p>\n<p>其中x是要转换的那个浮点数。</p>\n<p><em>注意：除了题目要求的输出，不能输出任何其他内容，比如输入时的提示，输出时的说明等等都不能。这道题目要求转换后的数字，程序就只能输出这个数字，除此之外任何内容都不能输出。</em></p>\n</li>\n<li>\n<p><strong>输入格式</strong><br>\n一个整数。</p>\n</li>\n<li>\n<p><strong>输出格式</strong><br>\n一个整数。</p>\n</li>\n<li>\n<p><strong>输入样例</strong><br>\n100</p>\n</li>\n<li>\n<p><strong>输出样例</strong><br>\n37</p>\n</li>\n</ul>\n<h3 id=\"解题代码\">解题代码</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">// 获得输入的整数</span>\n\t\t<span class=\"token keyword\">int</span> fahrenheit <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 计算摄氏度</span>\n\t\t<span class=\"token keyword\">double</span> centigrade <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fahrenheit <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 将浮点数转换为整数输出</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>centigrade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<ul>\n<li>本文仅作为博客分类的占位使用，随时删除！</li>\n<li>本文引用自shoka主题： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9qYXZhL2NvdXJzZS0xL3dlZWstMS8=\">https://shoka.lostyu.me/computer-science/java/course-1/week-1/</span></li>\n</ul>\n",
            "tags": [
                "程序人生"
            ]
        },
        {
            "id": "https://enjoycodetime.github.io/2020/04/12/computer-programming/test/",
            "url": "https://enjoycodetime.github.io/2020/04/12/computer-programming/test/",
            "title": "第1周 计算",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<p>:::note info<br>\n以下为个人学习笔记和习题整理课程：零基础学Java语言-浙江大学-翁恺 @ 中国大学MOOC<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1pKVS0xMDAxNTQxMDAx\">https://www.icourse163.org/course/ZJU-1001541001</span><br>\n:::</p>\n<h1>课堂笔记</h1>\n<h2 id=\"读输入、字符串输出\">读输入、字符串输出</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输入Scan之后，按下键盘 Alt + “/” 键，Eclipse下自动补全。</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 让in这个对象做读入下一行的动作，结果交给System.out这个对象去打印一行。</span>\n\n<span class=\"token comment\">// 字符串的 + 用来连接两个字符串形成更长的字符串。</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>tips：</p>\n<ul>\n<li><code>System.out.println</code> 会换行，<code>System.out.print</code> 则不会换行</li>\n<li>出现警告：<code>Resource leak: 'in' is never closed</code>，可以在函数的最后加入</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//释放</span>\n</code></pre>\n<h2 id=\"变量\">变量</h2>\n<ul>\n<li>\n<p><strong>形式</strong>：&lt;类型名称&gt; &lt;变量名称&gt; = &lt;初始值&gt;<br>\n<code>int price, amount; // 同时定义两个变量</code><br>\n<code>int price = 0; // 定义变量并赋值</code><br>\n<code>int price, amount = 100, age;</code></p>\n</li>\n<li>\n<p><strong>类型名称</strong>：Java是一种<strong>强类型语言</strong>，所有变量在使用前必须定义或声明，所有变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，程序运行过程中也不能改变变量的类型。</p>\n</li>\n<li>\n<p><strong>变量名称</strong>：又称标识符，只能由字母、数字、下划线构成，数字不能出现在第一个位置。此外，Java的保留字也不能用作标识符。</p>\n</li>\n<li>\n<p>Java的保留字列表</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>abstract</th>\n<th>do</th>\n<th>implements</th>\n<th>protected</th>\n<th>throws</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>double</td>\n<td>import</td>\n<td>public</td>\n<td>transient</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>instanceof</td>\n<td>return</td>\n<td>true</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>extends</td>\n<td>int</td>\n<td>short</td>\n<td>try</td>\n</tr>\n<tr>\n<td>case</td>\n<td>false</td>\n<td>interface</td>\n<td>static</td>\n<td>while</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>final</td>\n<td>long</td>\n<td>strictfp</td>\n<td>void</td>\n</tr>\n<tr>\n<td>char</td>\n<td>finally</td>\n<td>native</td>\n<td>super</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>class</td>\n<td>float</td>\n<td>new</td>\n<td>switch</td>\n</tr>\n<tr>\n<td>const*</td>\n<td>for</td>\n<td>null</td>\n<td>synchronized</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>goto*</td>\n<td>package</td>\n<td>this</td>\n</tr>\n<tr>\n<td>default</td>\n<td>if</td>\n<td>private</td>\n<td>throw</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"task-list\">\n<li>以下哪些标识符是符合规则的？</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> currency</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> lastName</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\"><label for=\"cbx_2\"> fireplace</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\"><label for=\"cbx_3\"> _last_name</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> xingmin</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\"><label for=\"cbx_5\"> class</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\"><label for=\"cbx_6\"> goto</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\"><label for=\"cbx_7\"> 4ever</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\"><label for=\"cbx_8\"> time-machine</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" disabled=\"true\"><label for=\"cbx_9\"> Int</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\"><label for=\"cbx_10\"> $12</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\"><label for=\"cbx_11\"> 我是变量</label></li>\n</ul>\n<h2 id=\"常量-final\">常量 final</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> AMOUNT <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// final是一个修饰符，表示这个变量的值一旦初始化，就不能再修改了。</span>\n</code></pre>\n<h2 id=\"变量类型\">变量类型</h2>\n<h3 id=\"整数-int\">整数 int</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>如果用户输入的不是整数，则会报错 <code>java.util.InputMismatchException</code>。</li>\n<li>程序要求读入多个数字时，可以在一行输入，中间用空格分开，也可以多行输入。</li>\n<li>每次召唤<code>in.nextInt()</code>，它就等待用户输入一个整数。</li>\n<li>两个整数的运算结果只能是整数。</li>\n<li>在Java中，<code>10</code>和<code>10.0</code>是完全不同的数。</li>\n</ul>\n<h3 id=\"浮点数-double\">浮点数 double</h3>\n<ul>\n<li><strong>浮点数运算有误差</strong>：由于二进制的自身限制，浮点计算需要将十进制先转换为二进制，然后对二进制数进行计算，因此导致误差。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token operator\">-</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 结果为 0.09999999999999987</span>\n</code></pre>\n<ul>\n<li>整数类型不能表达有小数部分的数；整数运算速度快，占内存小；日常中整数运算多。</li>\n</ul>\n<h2 id=\"赋值运算\">赋值运算</h2>\n<h3 id=\"强制类型转换\">强制类型转换</h3>\n<ul>\n<li>浮点数和整数放在一起运算时，Java会将整数转换成浮点数，然后进行浮点数运算。</li>\n<li>强制性转换的优先级高于四则运算。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//会报错</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//不会报错</span>\n</code></pre>\n<h3 id=\"运算符优先级\">运算符优先级</h3>\n<ul>\n<li>单目运算符<code>+</code> <code>-</code> 优先级最高</li>\n<li>结合关系一般自左向右，单目<code>+</code> <code>-</code>和赋值<code>=</code>自右向左。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">result <span class=\"token operator\">=</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"复合赋值\">复合赋值</h3>\n<ul>\n<li>5个算术运算符，<code>+ - * / %</code>，可以和赋值运算符 <code>=</code> 结合起来，形成复合赋值运算。注意，两个运算符中间不要有空格。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">total <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\ntotal <span class=\"token operator\">*</span> <span class=\"token operator\">=</span> sum<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntotal <span class=\"token operator\">/=</span> <span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>递增递减运算符 <code>++</code> <code>--</code>，给变量+1或-1</li>\n<li>前缀后缀：</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span>\nt1 <span class=\"token operator\">=</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// t1先被赋值为 a 即14， a自加到 15</span>\nt2 <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// a先自加到 15，t2被赋值为 a 即 15</span>\n</code></pre>\n<h1>编程题</h1>\n<h2 id=\"题目1-温度转换（5分）\">题目1. 温度转换（5分）</h2>\n<ul>\n<li>\n<p><strong>题目内容</strong><br>\n写一个将华氏温度转换成摄氏温度的程序，转换的公式是：</p>\n<p><code>°F = (9/5)*°C + 32</code></p>\n<p>其中C表示摄氏温度，F表示华氏温度。</p>\n<p>程序的输入是一个整数，表示华氏温度。输出对应的摄氏温度，也是一个整数。</p>\n<p>提示，为了把计算结果的浮点数转换成整数，需要使用下面的表达式：</p>\n<p><code>(int)x;</code></p>\n<p>其中x是要转换的那个浮点数。</p>\n<p><em>注意：除了题目要求的输出，不能输出任何其他内容，比如输入时的提示，输出时的说明等等都不能。这道题目要求转换后的数字，程序就只能输出这个数字，除此之外任何内容都不能输出。</em></p>\n</li>\n<li>\n<p><strong>输入格式</strong><br>\n一个整数。</p>\n</li>\n<li>\n<p><strong>输出格式</strong><br>\n一个整数。</p>\n</li>\n<li>\n<p><strong>输入样例</strong><br>\n100</p>\n</li>\n<li>\n<p><strong>输出样例</strong><br>\n37</p>\n</li>\n</ul>\n<h3 id=\"解题代码\">解题代码</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">// 获得输入的整数</span>\n\t\t<span class=\"token keyword\">int</span> fahrenheit <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 计算摄氏度</span>\n\t\t<span class=\"token keyword\">double</span> centigrade <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fahrenheit <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 将浮点数转换为整数输出</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>centigrade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<ul>\n<li>本文仅作为博客分类的占位使用，随时删除！</li>\n<li>本文引用自shoka主题： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9qYXZhL2NvdXJzZS0xL3dlZWstMS8=\">https://shoka.lostyu.me/computer-science/java/course-1/week-1/</span></li>\n</ul>\n",
            "tags": [
                "计算机编程"
            ]
        },
        {
            "id": "https://enjoycodetime.github.io/2020/04/12/Job/week-1/",
            "url": "https://enjoycodetime.github.io/2020/04/12/Job/week-1/",
            "title": "第1周 计算",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<p>:::note info<br>\n以下为个人学习笔记和习题整理课程：零基础学Java语言-浙江大学-翁恺 @ 中国大学MOOC<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1pKVS0xMDAxNTQxMDAx\">https://www.icourse163.org/course/ZJU-1001541001</span><br>\n:::</p>\n<h1>课堂笔记</h1>\n<h2 id=\"读输入、字符串输出\">读输入、字符串输出</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输入Scan之后，按下键盘 Alt + “/” 键，Eclipse下自动补全。</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 让in这个对象做读入下一行的动作，结果交给System.out这个对象去打印一行。</span>\n\n<span class=\"token comment\">// 字符串的 + 用来连接两个字符串形成更长的字符串。</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>tips：</p>\n<ul>\n<li><code>System.out.println</code> 会换行，<code>System.out.print</code> 则不会换行</li>\n<li>出现警告：<code>Resource leak: 'in' is never closed</code>，可以在函数的最后加入</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//释放</span>\n</code></pre>\n<h2 id=\"变量\">变量</h2>\n<ul>\n<li>\n<p><strong>形式</strong>：&lt;类型名称&gt; &lt;变量名称&gt; = &lt;初始值&gt;<br>\n<code>int price, amount; // 同时定义两个变量</code><br>\n<code>int price = 0; // 定义变量并赋值</code><br>\n<code>int price, amount = 100, age;</code></p>\n</li>\n<li>\n<p><strong>类型名称</strong>：Java是一种<strong>强类型语言</strong>，所有变量在使用前必须定义或声明，所有变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，程序运行过程中也不能改变变量的类型。</p>\n</li>\n<li>\n<p><strong>变量名称</strong>：又称标识符，只能由字母、数字、下划线构成，数字不能出现在第一个位置。此外，Java的保留字也不能用作标识符。</p>\n</li>\n<li>\n<p>Java的保留字列表</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>abstract</th>\n<th>do</th>\n<th>implements</th>\n<th>protected</th>\n<th>throws</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>double</td>\n<td>import</td>\n<td>public</td>\n<td>transient</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>instanceof</td>\n<td>return</td>\n<td>true</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>extends</td>\n<td>int</td>\n<td>short</td>\n<td>try</td>\n</tr>\n<tr>\n<td>case</td>\n<td>false</td>\n<td>interface</td>\n<td>static</td>\n<td>while</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>final</td>\n<td>long</td>\n<td>strictfp</td>\n<td>void</td>\n</tr>\n<tr>\n<td>char</td>\n<td>finally</td>\n<td>native</td>\n<td>super</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>class</td>\n<td>float</td>\n<td>new</td>\n<td>switch</td>\n</tr>\n<tr>\n<td>const*</td>\n<td>for</td>\n<td>null</td>\n<td>synchronized</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>goto*</td>\n<td>package</td>\n<td>this</td>\n</tr>\n<tr>\n<td>default</td>\n<td>if</td>\n<td>private</td>\n<td>throw</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"task-list\">\n<li>以下哪些标识符是符合规则的？</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> currency</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> lastName</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\"><label for=\"cbx_2\"> fireplace</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\"><label for=\"cbx_3\"> _last_name</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> xingmin</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\"><label for=\"cbx_5\"> class</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\"><label for=\"cbx_6\"> goto</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\"><label for=\"cbx_7\"> 4ever</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\"><label for=\"cbx_8\"> time-machine</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" disabled=\"true\"><label for=\"cbx_9\"> Int</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\"><label for=\"cbx_10\"> $12</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\"><label for=\"cbx_11\"> 我是变量</label></li>\n</ul>\n<h2 id=\"常量-final\">常量 final</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> AMOUNT <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// final是一个修饰符，表示这个变量的值一旦初始化，就不能再修改了。</span>\n</code></pre>\n<h2 id=\"变量类型\">变量类型</h2>\n<h3 id=\"整数-int\">整数 int</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>如果用户输入的不是整数，则会报错 <code>java.util.InputMismatchException</code>。</li>\n<li>程序要求读入多个数字时，可以在一行输入，中间用空格分开，也可以多行输入。</li>\n<li>每次召唤<code>in.nextInt()</code>，它就等待用户输入一个整数。</li>\n<li>两个整数的运算结果只能是整数。</li>\n<li>在Java中，<code>10</code>和<code>10.0</code>是完全不同的数。</li>\n</ul>\n<h3 id=\"浮点数-double\">浮点数 double</h3>\n<ul>\n<li><strong>浮点数运算有误差</strong>：由于二进制的自身限制，浮点计算需要将十进制先转换为二进制，然后对二进制数进行计算，因此导致误差。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token operator\">-</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 结果为 0.09999999999999987</span>\n</code></pre>\n<ul>\n<li>整数类型不能表达有小数部分的数；整数运算速度快，占内存小；日常中整数运算多。</li>\n</ul>\n<h2 id=\"赋值运算\">赋值运算</h2>\n<h3 id=\"强制类型转换\">强制类型转换</h3>\n<ul>\n<li>浮点数和整数放在一起运算时，Java会将整数转换成浮点数，然后进行浮点数运算。</li>\n<li>强制性转换的优先级高于四则运算。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//会报错</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//不会报错</span>\n</code></pre>\n<h3 id=\"运算符优先级\">运算符优先级</h3>\n<ul>\n<li>单目运算符<code>+</code> <code>-</code> 优先级最高</li>\n<li>结合关系一般自左向右，单目<code>+</code> <code>-</code>和赋值<code>=</code>自右向左。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">result <span class=\"token operator\">=</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"复合赋值\">复合赋值</h3>\n<ul>\n<li>5个算术运算符，<code>+ - * / %</code>，可以和赋值运算符 <code>=</code> 结合起来，形成复合赋值运算。注意，两个运算符中间不要有空格。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">total <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\ntotal <span class=\"token operator\">*</span> <span class=\"token operator\">=</span> sum<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntotal <span class=\"token operator\">/=</span> <span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>递增递减运算符 <code>++</code> <code>--</code>，给变量+1或-1</li>\n<li>前缀后缀：</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span>\nt1 <span class=\"token operator\">=</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// t1先被赋值为 a 即14， a自加到 15</span>\nt2 <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// a先自加到 15，t2被赋值为 a 即 15</span>\n</code></pre>\n<h1>编程题</h1>\n<h2 id=\"题目1-温度转换（5分）\">题目1. 温度转换（5分）</h2>\n<ul>\n<li>\n<p><strong>题目内容</strong><br>\n写一个将华氏温度转换成摄氏温度的程序，转换的公式是：</p>\n<p><code>°F = (9/5)*°C + 32</code></p>\n<p>其中C表示摄氏温度，F表示华氏温度。</p>\n<p>程序的输入是一个整数，表示华氏温度。输出对应的摄氏温度，也是一个整数。</p>\n<p>提示，为了把计算结果的浮点数转换成整数，需要使用下面的表达式：</p>\n<p><code>(int)x;</code></p>\n<p>其中x是要转换的那个浮点数。</p>\n<p><em>注意：除了题目要求的输出，不能输出任何其他内容，比如输入时的提示，输出时的说明等等都不能。这道题目要求转换后的数字，程序就只能输出这个数字，除此之外任何内容都不能输出。</em></p>\n</li>\n<li>\n<p><strong>输入格式</strong><br>\n一个整数。</p>\n</li>\n<li>\n<p><strong>输出格式</strong><br>\n一个整数。</p>\n</li>\n<li>\n<p><strong>输入样例</strong><br>\n100</p>\n</li>\n<li>\n<p><strong>输出样例</strong><br>\n37</p>\n</li>\n</ul>\n<h3 id=\"解题代码\">解题代码</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">// 获得输入的整数</span>\n\t\t<span class=\"token keyword\">int</span> fahrenheit <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 计算摄氏度</span>\n\t\t<span class=\"token keyword\">double</span> centigrade <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fahrenheit <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 将浮点数转换为整数输出</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>centigrade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<ul>\n<li>本文仅作为博客分类的占位使用，随时删除！</li>\n<li>本文引用自shoka主题： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9qYXZhL2NvdXJzZS0xL3dlZWstMS8=\">https://shoka.lostyu.me/computer-science/java/course-1/week-1/</span></li>\n</ul>\n",
            "tags": [
                "职场"
            ]
        },
        {
            "id": "https://enjoycodetime.github.io/2020/04/12/Reading-notes/week-1/",
            "url": "https://enjoycodetime.github.io/2020/04/12/Reading-notes/week-1/",
            "title": "第1周 计算",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<p>:::note info<br>\n以下为个人学习笔记和习题整理课程：零基础学Java语言-浙江大学-翁恺 @ 中国大学MOOC<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvdXJzZTE2My5vcmcvY291cnNlL1pKVS0xMDAxNTQxMDAx\">https://www.icourse163.org/course/ZJU-1001541001</span><br>\n:::</p>\n<h1>课堂笔记</h1>\n<h2 id=\"读输入、字符串输出\">读输入、字符串输出</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输入Scan之后，按下键盘 Alt + “/” 键，Eclipse下自动补全。</span>\n\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 让in这个对象做读入下一行的动作，结果交给System.out这个对象去打印一行。</span>\n\n<span class=\"token comment\">// 字符串的 + 用来连接两个字符串形成更长的字符串。</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" world.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>tips：</p>\n<ul>\n<li><code>System.out.println</code> 会换行，<code>System.out.print</code> 则不会换行</li>\n<li>出现警告：<code>Resource leak: 'in' is never closed</code>，可以在函数的最后加入</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//释放</span>\n</code></pre>\n<h2 id=\"变量\">变量</h2>\n<ul>\n<li>\n<p><strong>形式</strong>：&lt;类型名称&gt; &lt;变量名称&gt; = &lt;初始值&gt;<br>\n<code>int price, amount; // 同时定义两个变量</code><br>\n<code>int price = 0; // 定义变量并赋值</code><br>\n<code>int price, amount = 100, age;</code></p>\n</li>\n<li>\n<p><strong>类型名称</strong>：Java是一种<strong>强类型语言</strong>，所有变量在使用前必须定义或声明，所有变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，程序运行过程中也不能改变变量的类型。</p>\n</li>\n<li>\n<p><strong>变量名称</strong>：又称标识符，只能由字母、数字、下划线构成，数字不能出现在第一个位置。此外，Java的保留字也不能用作标识符。</p>\n</li>\n<li>\n<p>Java的保留字列表</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>abstract</th>\n<th>do</th>\n<th>implements</th>\n<th>protected</th>\n<th>throws</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td>double</td>\n<td>import</td>\n<td>public</td>\n<td>transient</td>\n</tr>\n<tr>\n<td>break</td>\n<td>else</td>\n<td>instanceof</td>\n<td>return</td>\n<td>true</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>extends</td>\n<td>int</td>\n<td>short</td>\n<td>try</td>\n</tr>\n<tr>\n<td>case</td>\n<td>false</td>\n<td>interface</td>\n<td>static</td>\n<td>while</td>\n</tr>\n<tr>\n<td>catch</td>\n<td>final</td>\n<td>long</td>\n<td>strictfp</td>\n<td>void</td>\n</tr>\n<tr>\n<td>char</td>\n<td>finally</td>\n<td>native</td>\n<td>super</td>\n<td>volatile</td>\n</tr>\n<tr>\n<td>class</td>\n<td>float</td>\n<td>new</td>\n<td>switch</td>\n</tr>\n<tr>\n<td>const*</td>\n<td>for</td>\n<td>null</td>\n<td>synchronized</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>goto*</td>\n<td>package</td>\n<td>this</td>\n</tr>\n<tr>\n<td>default</td>\n<td>if</td>\n<td>private</td>\n<td>throw</td>\n</tr>\n</tbody>\n</table>\n<ul class=\"task-list\">\n<li>以下哪些标识符是符合规则的？</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\"><label for=\"cbx_0\"> currency</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\"><label for=\"cbx_1\"> lastName</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\"><label for=\"cbx_2\"> fireplace</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\"><label for=\"cbx_3\"> _last_name</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\"><label for=\"cbx_4\"> xingmin</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\"><label for=\"cbx_5\"> class</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" disabled=\"true\"><label for=\"cbx_6\"> goto</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\"><label for=\"cbx_7\"> 4ever</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\"><label for=\"cbx_8\"> time-machine</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" disabled=\"true\"><label for=\"cbx_9\"> Int</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\"><label for=\"cbx_10\"> $12</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\"><label for=\"cbx_11\"> 我是变量</label></li>\n</ul>\n<h2 id=\"常量-final\">常量 final</h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> AMOUNT <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// final是一个修饰符，表示这个变量的值一旦初始化，就不能再修改了。</span>\n</code></pre>\n<h2 id=\"变量类型\">变量类型</h2>\n<h3 id=\"整数-int\">整数 int</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>如果用户输入的不是整数，则会报错 <code>java.util.InputMismatchException</code>。</li>\n<li>程序要求读入多个数字时，可以在一行输入，中间用空格分开，也可以多行输入。</li>\n<li>每次召唤<code>in.nextInt()</code>，它就等待用户输入一个整数。</li>\n<li>两个整数的运算结果只能是整数。</li>\n<li>在Java中，<code>10</code>和<code>10.0</code>是完全不同的数。</li>\n</ul>\n<h3 id=\"浮点数-double\">浮点数 double</h3>\n<ul>\n<li><strong>浮点数运算有误差</strong>：由于二进制的自身限制，浮点计算需要将十进制先转换为二进制，然后对二进制数进行计算，因此导致误差。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token operator\">-</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 结果为 0.09999999999999987</span>\n</code></pre>\n<ul>\n<li>整数类型不能表达有小数部分的数；整数运算速度快，占内存小；日常中整数运算多。</li>\n</ul>\n<h2 id=\"赋值运算\">赋值运算</h2>\n<h3 id=\"强制类型转换\">强制类型转换</h3>\n<ul>\n<li>浮点数和整数放在一起运算时，Java会将整数转换成浮点数，然后进行浮点数运算。</li>\n<li>强制性转换的优先级高于四则运算。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//会报错</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//不会报错</span>\n</code></pre>\n<h3 id=\"运算符优先级\">运算符优先级</h3>\n<ul>\n<li>单目运算符<code>+</code> <code>-</code> 优先级最高</li>\n<li>结合关系一般自左向右，单目<code>+</code> <code>-</code>和赋值<code>=</code>自右向左。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">result <span class=\"token operator\">=</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> result <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"复合赋值\">复合赋值</h3>\n<ul>\n<li>5个算术运算符，<code>+ - * / %</code>，可以和赋值运算符 <code>=</code> 结合起来，形成复合赋值运算。注意，两个运算符中间不要有空格。</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">total <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\ntotal <span class=\"token operator\">*</span> <span class=\"token operator\">=</span> sum<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntotal <span class=\"token operator\">/=</span> <span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\ntotal <span class=\"token operator\">=</span> total <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>递增递减运算符 <code>++</code> <code>--</code>，给变量+1或-1</li>\n<li>前缀后缀：</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span>\nt1 <span class=\"token operator\">=</span> a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// t1先被赋值为 a 即14， a自加到 15</span>\nt2 <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// a先自加到 15，t2被赋值为 a 即 15</span>\n</code></pre>\n<h1>编程题</h1>\n<h2 id=\"题目1-温度转换（5分）\">题目1. 温度转换（5分）</h2>\n<ul>\n<li>\n<p><strong>题目内容</strong><br>\n写一个将华氏温度转换成摄氏温度的程序，转换的公式是：</p>\n<p><code>°F = (9/5)*°C + 32</code></p>\n<p>其中C表示摄氏温度，F表示华氏温度。</p>\n<p>程序的输入是一个整数，表示华氏温度。输出对应的摄氏温度，也是一个整数。</p>\n<p>提示，为了把计算结果的浮点数转换成整数，需要使用下面的表达式：</p>\n<p><code>(int)x;</code></p>\n<p>其中x是要转换的那个浮点数。</p>\n<p><em>注意：除了题目要求的输出，不能输出任何其他内容，比如输入时的提示，输出时的说明等等都不能。这道题目要求转换后的数字，程序就只能输出这个数字，除此之外任何内容都不能输出。</em></p>\n</li>\n<li>\n<p><strong>输入格式</strong><br>\n一个整数。</p>\n</li>\n<li>\n<p><strong>输出格式</strong><br>\n一个整数。</p>\n</li>\n<li>\n<p><strong>输入样例</strong><br>\n100</p>\n</li>\n<li>\n<p><strong>输出样例</strong><br>\n37</p>\n</li>\n</ul>\n<h3 id=\"解题代码\">解题代码</h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">// 获得输入的整数</span>\n\t\t<span class=\"token keyword\">int</span> fahrenheit <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 计算摄氏度</span>\n\t\t<span class=\"token keyword\">double</span> centigrade <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>fahrenheit <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9</span> <span class=\"token operator\">/</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 将浮点数转换为整数输出</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>centigrade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n<ul>\n<li>本文仅作为博客分类的占位使用，随时删除！</li>\n<li>本文引用自shoka主题： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9qYXZhL2NvdXJzZS0xL3dlZWstMS8=\">https://shoka.lostyu.me/computer-science/java/course-1/week-1/</span></li>\n</ul>\n",
            "tags": [
                "读书笔记"
            ]
        }
    ]
}